version: 2.1

commands:
  install-rust:
    steps:
      - run:
          name: Install Rust
          command: curl https://sh.rustup.rs -sSf | sh
  setup-rust-toolchain:
    parameters:
      rust-version:
        type: string
        default: "stable"
    steps:
      - run:
          name: Setup Rust toolchain
          command: |
            rustup install <<parameters.rust-version>>
            rustup default <<parameters.rust-version>>
            rustc --version
  build-libs:
    parameters:
      platform:
        type: string
      target:
        type: string
    steps:
      - run:
          name: Build libs
          command: |
            pushd libs && ./build-all.sh <<parameters.platform>> && popd
            echo 'export OPENSSL_DIR=$(pwd)/libs/<<parameters.platform>>/<<parameters.target>>/openssl' >> $BASH_ENV
            echo 'export SQLCIPHER_LIB_DIR=$(pwd)/libs/<<parameters.platform>>/<<parameters.target>>/sqlcipher/lib' >> $BASH_ENV
            echo 'export SQLCIPHER_INCLUDE_DIR=$(pwd)/libs/<<parameters.platform>>/<<parameters.target>>/sqlcipher/include' >> $BASH_ENV
  build-desktop-libs:
    steps:
      - restore_cache:
          name: Restore libs cache
          keys:
            - libs-cache-v2-{{ arch }}-{{ checksum "libs/build-all.sh" }}-{{ checksum "libs/build-openssl-desktop.sh" }}-{{ checksum "libs/build-sqlcipher-desktop.sh" }}
      - run: sudo apt-get install tcl
      - build-libs:
          platform: desktop
          target: linux-x86-64
      - save_cache:
          name: Save libs cache
          key: libs-cache-v2-{{ arch }}-{{ checksum "libs/build-all.sh" }}-{{ checksum "libs/build-openssl-desktop.sh" }}-{{ checksum "libs/build-sqlcipher-desktop.sh" }}
          paths:
            - libs/desktop
  build-ios-libs:
    steps:
      - build-libs:
          platform: ios
          target: universal
  rust-tests:
    steps:
      - checkout
      - build-desktop-libs
      # Test with 1. only default features on, 2. all features on, 3. no features on.
      # This is not perfect (really we want the cartesian product), but is good enough in practice.
      - run:
          name: Test
          command: cargo test --all --verbose
      - run:
          name: Test (all features)
          command: cargo test --all --all-features --verbose
      - run:
          name: Test (no default features)
          command: cargo test --all --no-default-features --verbose

jobs:
  Check Rust formatting:
    docker:
      - image: circleci/rust:latest
    steps:
      - checkout
      - run: rustup component add rustfmt
      - run: rustfmt --version
      - run: cargo fmt -- --check
  Rust tests - stable:
    docker:
      - image: circleci/rust:latest
    steps:
      - setup-rust-toolchain
      - rust-tests
  Rust tests - beta:
    docker:
      - image: circleci/rust:latest
    steps:
      - setup-rust-toolchain:
          rust-version: beta
      - rust-tests
  Rust tests - nightly:
    docker:
      - image: circleci/rust:latest
    steps:
      - setup-rust-toolchain:
          rust-version: nightly
      - rust-tests
  Build and release Carthage archive:
    macos:
      xcode: "10.1.0"
    steps:
      - install-rust
      - checkout
      # - build-ios-libs #TODO: Enable once we need to ship logins on iOS
      - run:
          name: Build Carthage archive
          command: |
            rustup target add aarch64-apple-ios armv7-apple-ios i386-apple-ios x86_64-apple-ios
            cargo install cargo-lipo
            brew update && (brew outdated carthage || brew upgrade carthage)
            carthage build --no-skip-current --verbose
            carthage archive --output ApplicationServices.framework.zip
            rm -rf Carthage
      - run:
          name: Release Carthage archive on GitHub
          command: |
            gem install dpl
            dpl --provider=releases --api-key=${GITHUB_TOKEN} --file=ApplicationServices.framework.zip --overwrite

workflows:
  version: 2
  check-formating:
    jobs:
      - Check Rust formatting
  run-tests:
    jobs:
      - Rust tests - stable
      - Rust tests - beta
      - Rust tests - nightly
  carthage-framework:
    jobs:
      - Build and release Carthage archive:
          filters:
            tags:
              only: /^v.*/
